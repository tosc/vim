priority 1

snippet List "New List" b
List<${1:ListType}> ${2:variable} = new List<$1>{};
$0
endsnippet

snippet if "If" b
if($1)
{
	${2:${VISUAL}}
}
$0
endsnippet
snippet elif "Else if" b
else if($1)
{
	${2:${VISUAL}}
}
$0
endsnippet
snippet else "Else" b
else
{
	${1:${VISUAL}}
}
$0
endsnippet
snippet switch "switch" b
switch($1)
{
	case $2:
		$3
		break;
	$4
}
$0
endsnippet
snippet case "case" b
case $1:
	$2
	break;
$0
endsnippet

snippet for "For" b
for(int ${1:index} = 0; $1 < ${2:times}; $1++)
{
	${3:${VISUAL}}
}
$0
endsnippet
snippet fori "For int i" b
for(int i = 0; i < ${1:times}; i++)
{
	${2:${VISUAL}}
}
$0
endsnippet
snippet forj "For int j" b
for(int j = 0; j < ${1:times}; j++)
{
	${2:${VISUAL}}
}
$0
endsnippet
snippet forx "For int x" b
for(int x = 0; x < ${1:times}; x++)
{
	${2:${VISUAL}}
}
$0
endsnippet
snippet fory "For int y" b
for(int y = 0; y < ${1:times}; y++)
{
	${2:${VISUAL}}
}
$0
endsnippet
snippet fore "For each" b
foreach(${1:ElementType} ${2:ElementVarName} in ${3:Collection})
{
	${4:${VISUAL}}
}
$0
endsnippet

snippet comment "Comment method" b
/// <summary>
/// $1
/// </summary>$0
endsnippet
snippet param "Documentation for parameter" b
/// <param name="$1">$2</param>
$0
endsnippet
snippet returns "Documentation for return" b
/// <returns>$1</returns>$0
endsnippet

snippet area "New GUIarea" b
GUILayout.BeginArea(new Rect($1, $2, $3, $4));
${5:${VISUAL}}
GUILayout.EndArea();
$0
endsnippet
snippet hor "New gui horizontal" b
GUILayout.BeginHorizontal();
${1:${VISUAL}}
GUILayout.EndHorizontal();
$0
endsnippet
snippet flex "New gui flexspace" b
GUILayout.FlexibleSpace();
$0
endsnippet
snippet vert "new gui vert" b
GUILayout.BeginVertical();
${1:${VISUAL}}
GUILayout.EndVertical();
$0
endsnippet
snippet button "gui button" b
if (GUILayout.Button ("${1:Button}")) 
{
	${1:${VISUAL}}
}
$0
endsnippet
snippet toggle "gui toggle" b
bool ${1:newToggleVar} = GUILayout.Toggle(${2:toggleVar}, "${3:Button}");
$0
endsnippet
snippet set "Setter" b
${1:public} void Set${2}(${3:String} ${4})
{
	this.$4 = $4;
}
$0
endsnippet
snippet /get/ "getter" !br
${1:public} ${2:String} Get${3:Name}() 
{
	return `!p snip.rv = t[3].lower()`;
}
$0
endsnippet
snippet /getset/ "getter/setter" !br
${1:public} ${2:String} Get${3:Name}() 
{
	return `!p snip.rv = t[3].lower()`;
}

$1 void Set$3($2 `!p snip.rv = t[3].lower()`)
{
	this.`!p snip.rv = t[3].lower()` = `!p snip.rv = t[3].lower()`;
}
$0
endsnippet

snippet US "New unity script" b
using UnityEngine;
using System.Collections;

public class ${1:ClassName} : MonoBehaviour 
{
	$0

	void Awake()
	{
	}

	void Start () 
	{
	}

	void Update () 
	{
	}
}
endsnippet
