# Snippet setttings
priority 1

global !p
from snippetHelpers import *
endglobal

# Header
snippet "import|include" "import:import|include" br
import ${1:package}
endsnippet

# Logical operations
snippet "\|\|" "or" r
or
endsnippet
snippet "&&" "and" r
and
endsnippet
snippet "!([a-zA-Z0-9.,\-]+)" "not:not" r
not `!p snip.rv = match.group(1)`
endsnippet

# Conditional snippets
snippet if "if" b
if ${1:True}:
	${0:${VISUAL}}
endsnippet
snippet "ifsh?o?r?t?" "if shorthand:ifshort" r
${1:var} if ${2:condition} else ${3:otherVar}
endsnippet
snippet "ifel?s?e?" "if else:ifelse" br
<MISSING ifelse>
endsnippet
snippet "elif|(else if|elseif)" "else if:elif|elseif" br
elif ${1:True}:
	${0:${VISUAL}}
endsnippet
snippet else "else" b
else:
	${0:${VISUAL}}
endsnippet
snippet switch "switch" b
No switch in python. Use if,elif, else.
endsnippet
snippet case "case" b
No switch in python. Use if,elif, else.
endsnippet

# Loop snippets
snippet for "for" b
for ${1:var} in range(0,${2:10}):
	${0:${VISUAL}}
endsnippet
snippet "for((?!e)\w+)" "for ??? as variable:for???" br
for `!p snip.rv = match.group(1)` in range(0,${1:10}):
	${VISUAL}${0}
endsnippet
snippet "fore(ach)?" "for each element in collection:foreach" br
for ${1:thing} in ${2:collection}:
	${VISUAL}${0}
endsnippet
snippet while "while" b
while ${1:True}:
	${0:${VISUAL}}
endsnippet
snippet do "do while" b
while True:
	${0:${VISUAL}}	
	if ${1:fail_condition}:
		break
endsnippet

# Methods/functinos
snippet "func?t?i?o?n?" "function:function" br
def ${1:funcName}(${2:param}):
	${0:pass}${0:${VISUAL}}
endsnippet
snippet "meth?o?d?" "method:method" br
def ${1:methodName}(self${2:, param}):
	${0:pass}${0:${VISUAL}}
endsnippet
snippet "cons?t?r?u?c?t?o?r?" "constructor:constructor" br
def __init__(self${1:, param}):
	${0:pass}${0:${VISUAL}}
endsnippet

# String snippets
snippet "[sS]tr(ing)?" "string variable:string|String" br
${1:var} = "${2:string}"
endsnippet
snippet "contains|in" "string contains or in:contains|in" br
${1:"another string"} in ${2:"string"}
endsnippet
snippet "([a-zA-Z0-9."']+) contains" "string contains ???:??? contains" br
${1:"another string"} in `!p snip.rv = match.group(1)`
endsnippet
snippet "([a-zA-z0-9."']+) in" "??? in string:??? in" br
`!p snip.rv = match.group(1)` in ${1:"another string"}
endsnippet
snippet "[tT]o[sS]tring\(?\)?" "variable to string:toString|ToString" br
str(${VISUAL}${0})
endsnippet
snippet "((\([^"]*\))|[a-zA-Z0-9.,\-]+)+.[tT]o[sS]tring\(?\)?" "??? to string:???toString|???ToString" br
str(`!p snip.rv = match.group(1)`)
endsnippet

# int snippets
snippet "[iI]nt" "int variable:int|Int" br
${1:var} = ${2:${10}}
endsnippet
snippet "(\w+)\+\+" "increment int:???++" r
`!p snip.rv = match.group(1)` += 1
endsnippet
snippet "(\w+)\-\-" "decrement int:???--" r
`!p snip.rv = match.group(1)` -= 1
endsnippet

# Variable snippets
snippet "[dD]ouble" "double variable:double|Double" br
${1:var} = ${2:2.0}
endsnippet
snippet "[fF]loat" "float variable:float|Float" br
${1:var} = ${2:2.0}
endsnippet
snippet "[bB]ool(ean)?" "float variable:boolean|Boolean" br
${1:var} = ${2:True}
endsnippet

# Datatype snippets
snippet enum "enum, requires from enum import Enum" b
${1:EnumName} = Enum('${2:item}')
endsnippet
snippet list "list" b
${1:listName} = [${0:item}]
endsnippet
snippet "(\w+) ?list" "list of type ???:??? list" br
${1:listName} = [${0:item}]
endsnippet

# Documentation snippets
snippet "\"|#|//" "comment" br
# ${VISUAL}${0}
endsnippet
snippet "(m(ulti)?l(ine)?c(omment)?)|'''|/\*" " A comment spanning multiple lines:multilinecomment" br
'''
${VISUAL}${0}
'''
endsnippet
snippet comment "comment" b
"""
${1:What it does.}

Parameters:
	${2:param1 - first param}

${3:Returns:}
"""
endsnippet

# Special snippets
snippet time "current time in milliseconds, import time" b
time.time()
endsnippet
snippet sleep "sleep, import time" b
time.sleep(${0:seconds})
endsnippet
snippet print "print" b
print ${VISUAL:"}${0}`!p 
if snip.v.text == "":
	snip.rv = '"'
else:
	snip.rv = "" `
endsnippet
snippet "printva?r?" "print a variable:printvar" r
print ${0}
endsnippet
snippet randomnr "get a random number 1 <= number <= 10, import random"
random.randint(${1:1},${2:10})	
endsnippet
snippet randomobject "get a random object from a collection, import random"
random.choice(${1:collection})
endsnippet

# New code snippets
snippet main "main" b
Python does not need a main. Just write the code in an empty document.
endsnippet
snippet class "New class" b
class ${1:NewClass}:
	def __init__(self):
		pass
	${VISUAL}$0
endsnippet
snippet thread "new thread:thread" b
from threading import Thread

class ${1:myThread}(Thread):
    def __init__(self):
        Thread.__init__(self)
        self.daemon = True
        self.start()

    def run(self):
    	pass

$1()
endsnippet

# Language specific
snippet runOnly "Run external program, import os"
os.system(${1:"ls -la"})$0
endsnippet
snippet runPipe "Run external and get output, import subprocess"
cmd = subprocess.Popen(${1:"ls -la"}, stdout=subprocess.PIPE)	
for row in cmd.stdout:
	${0}
endsnippet
snippet url "Fetch info from url, import urllib2:url"
response = urllib2.urlopen('${1:www.google.com}')
html = response.read()
response.close()
${0}
endsnippet
snippet htmlparser "Parses a html site, from HTMLParser import HTMLParser:htmlparser"
class ${1:MyHTMLParser}(HTMLParser):
    def handle_starttag(self, tag, attr):
    	${2:print tag}
    def handle_endtag(self, tag):
    	${3:print tag}
    def handle_data(self, data):
    	${4:print tag}

parser = MyHTMLParser()
parser.feed(${5:<p>test</p>})
${0}
endsnippet
snippet inforegex "info about regex"
# if !match:
# - string does not match regex.
# match.group(1)
# - First regexhit.
endsnippet
snippet regex "regex, import re"
${1:match} = re.match('${2:^S*}', ${3:line})
endsnippet
# Stream snippets
snippet streamopen "Open a stream:streamopen" b
${1:streamName} = open('${2:filename}', '${3:#write - w, read - r, append to file - a, read and write - r+#}')
endsnippet
snippet streamclose "Close a stream:streamopen" b
${1:streamName}.close()
endsnippet
snippet streamread "Read from a stream:streamread" b
<MISSING streamread>
endsnippet
snippet streamreadline "Read a line from a stream:streamreadline" b
<MISSING streamreadline>
endsnippet
snippet streamwrite "write to a stream:streamwrite" b
${1:streamName}.write(${2:"Line to write"})
endsnippet
# Gui snippets
snippet guiinfoall "info about how to use the gui"
# Use guistart or guinew to start a empty gui.
# These snippets use the gridsystem for positioning and all
# widgets needs a gridposition to show up.
endsnippet
snippet "guinew|guistart" "A gui:guinew|guistart" br
from Tkinter import *

class Gui:
	def __init__(self, window):
		window.title("WINDOW TITLE")
		$0

window = Tk()
gui = Gui(window)

window.mainloop()
endsnippet
snippet "gui((int)|(string)|(boolean)|(double))+var" "A variable used for entry.:guiintvar|guistringvar|guiboolvar|guidoublevar" r
self.${1:var} = `!p snip.rv = match.group(1).title()`Var()
self.$1.set("${2:Text}")
endsnippet
snippet guiinfobind "Info about how to use guibind"
# You call bind on the widget you want to have a keybinding.
# The First arugment is the key and the second is the function that will
# be called when you press the binding.
# The function has to look like this:
# def function(self, event)
# The keys are:
# <Button-1> - Mousebutton 1.
# <ButtonRelease-1> - Mousebutton 1 up.
# <Double-Button-1> - Doubleclick.
# <Return> - Enter
# <Leave> - Mouse outside widget.
# <Key> - Char of the key presset.
# a - You typed the character.
# <Shift-Up> - Pressing shift and up.
# <Control-Q> - Pressing Control and Shift-Q.
endsnippet
snippet guibind "New keybinding" b
${1:widget}.bind("<${2:Down}>", self.${3:function})
$0
endsnippet
snippet guibutton "New button" b
${1:button} = Button(${2:parent}, text="${3:buttonText}", command = self.${4:commandFunction})
$1.grid(row = ${5:rowNr}, column = ${6:columnNr}, ${7:columnSpan = 1, }${8:sticky = W+E})
$0
endsnippet
snippet guilabel "New label" b
${1:label} = Label(${2:parent}, text="${3:buttonText}")
$1.grid(row = ${4:rowNr}, column = ${5:columnNr})
$0
endsnippet
snippet guilabelvar "New label with var" b
self.${1:label}Var = StringVar()
$1 = Label(${2:parent}, textvariable = self.$1Var)
$1.grid(row = ${3:rowNr}, column = ${4:columnNr})
self.$1Var.set("${5:Starttext for label}")
$0
endsnippet
snippet guiinfoentry "info about entry"
# First argument is the parent where this entry will be placed.
# The second optional arugment is the variable that you can set and get
# to get the value of the entry.
# To get a callback for when the entry changed, just add a keybinding
# for KeyRelease and you should be good.
endsnippet
snippet guientry "guientry is a insertfield"
${1:entry} = Entry(${2:parent}, textvariable = self.${3:stringVar})
$1.grid(row = ${4:rowNr}, column = ${5:columnNr})
endsnippet
